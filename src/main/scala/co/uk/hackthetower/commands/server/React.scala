package co.uk.hackthetower.commands.server

import cats._
import cats.data._
import cats.std.all._
/**
  * React(generation=int,name=string,time=int,view=string,energy=string,master=int:int,collision=int:int,slaves=int,...)
  *
  * "React" is invoked by the server once for each entity for each step in which the entity is allowed to move (mini-bots every cycle, bots every second cycle - see the Game Rules for details). The plug-in must return a response for the entity with the given entity name that is appropriate for the given view of the world.
  *
  * Parameters:
  *
  * generation: the generation of this bot. The master bot is the only bot of generation 0 (zero);? the mini-bots it spawned are of generation 1 (one); the mini-bots spawned by ? these are generation 2 (two), etc. Use this parameter to distinguish between ? mini-bots (slaves) and your master bot.
  * name: the name of the entity. For master bots, this is the name of the player (which in turn is the name of the plug-in directory the bot was loaded from). For mini-bots, this is either the name provided to Spawn() or a default name that was auto-generated by the server when the mini-bot was spawned.
  * time: a non-negative, monotonically increasing integer that represents the simulation time (basically a simulation step counter).
  * view: the view that the player has of the playing field. The view is a square region containing NN cells, where N is the width and height of the region. Each cell is represented as a single ASCII character. The meaning of the characters is defined in the table *View/Cell Encoding.
  * energy: the entity's current energy level
  * master: for mini-bots only: relative position of the master, in cells, in the format "x:y", e.g. "-1:1". To return to the master, the mini-bot can use this as the move direction (with some obstacle avoidance, of course).
  * collision: if the entity failed to execute a move requested in the previous cycle because a collision with another entity occurred, this parameter is set to the direction of the failed move, e.g. "1:-1" if a move right and up could not be executed. If no collision occurred, this property is not defined.
  * slaves: the number of slave bots that the user currently has alive as at the current time.
  * In addition to these system-generated parameters, the server passes in all state parameters of the entity that were set by the player via Spawn() or Set() (see below). If, for example, a mini-bot was spawned with Spawn(...,role=missile), the React invocation will contain a parameter called role with the value missile.
  *
  * The control function is expected to return a valid response, which may consist of zero or more commands separated by a pipe (|) character. The available commands are listed in the section Opcodes of Plugin-to-Server Commands.
  */
case class React(generation: Int, name: String, time: Int, view: String, energy: String, master: Option[(Int, Int)], collision: Option[(Int, Int)], slaves: Int, state: Map[String, String]) extends ServerCommand

object React {

  private val Generation = "generation"
  private val Name = "name"
  private val Time = "time"
  private val View = "view"
  private val Energy = "energy"
  private val Master = "master"
  private val Collision = "collision"
  private val Slaves = "slaves"

  val allKeys = Generation :: Name :: Time :: View :: Energy :: Master :: Collision :: Slaves :: Nil

  def fromMap(input: Map[String, String]): ValidatedNel[String, ServerCommand] =
    Apply[ValidatedNel[String, ?]].map8(
      ServerCommand.isNumeric(input, Generation),
      ServerCommand.isPresent(input, Name),
      ServerCommand.isNumeric(input, Time),
      ServerCommand.isPresent(input, View),
      ServerCommand.isPresent(input, Energy),
      ServerCommand.isOptionalIntInt(input, Master),
      ServerCommand.isOptionalIntInt(input, Collision),
      ServerCommand.isNumeric(input, Slaves)
    ) {
      case (generation, name, time, view, energy, master, collision, slaves) => {
        val state: Map[String, String] = input -- allKeys
        React(generation, name, time, view, energy, master, collision, slaves, state)
      }
    }

}